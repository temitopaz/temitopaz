--In this project, I explore and analyze data on the top 250 movies on IMDb. First, I imported my data into SQLite, then I updated the budget information from two foreign films that had not been converted to USD. Then I wrote queries to pull information about budget, rating, profit, and popularity of the films. 

--view dataset-- 
SELECT * 
FROM CopyofIMDBTop250MoviesCleanedIMDBTop250Movies;

--change table name--
ALTER TABLE CopyofIMDBTop250MoviesCleanedIMDBTop250Movies RENAME TO movies;

SELECT *
FROM movies;

--top 5 budgeted movies-- 
SELECT name, budget
FROM movies
ORDER BY budget DESC
LIMIT 5;

--Princess Mononoke budget correction-- 
UPDATE movies
SET budget = REPLACE(budget, 2400000000, 23500000);

--3 Idiot budget correction-- 
UPDATE movies
SET budget = REPLACE(budget, 550000000, 6700000); 

--top 5 budgeted movies, updated-- 
SELECT name, budget
FROM movies
ORDER BY budget DESC
LIMIT 5;

--top 5 rated movies-- 
SELECT name, rating
FROM movies
ORDER BY rating DESC
LIMIT 5;

--top 5 box office hits--
SELECT name, box_office
FROM movies
ORDER BY box_office DESC
LIMIT 5;

--top 10 highest profit movies--
SELECT name, (box_office - budget) AS profit
FROM movies
ORDER BY profit DESC
LIMIT 10;

--most popular genres-- 
SELECT genre, COUNT(*) AS genre_count
FROM (
  	SELECT TRIM(value) AS genre
  	FROM movies
  	CROSS JOIN json_each('["' || REPLACE(genre, ',', '","') || '"]')
)
GROUP BY genre
ORDER BY genre_count DESC
LIMIT 5;

--top 10 directors-- 
SELECT directors, COUNT(*) AS number_of_movies
FROM movies
GROUP BY directors
ORDER BY number_of_movies DESC
LIMIT 10;

--number of movies in each rating category-- 
SELECT certificate, COUNT(*) AS total
FROM movies
GROUP BY certificate
ORDER BY total DESC;

--5 best years for movies-- 
SELECT year, COUNT(year) AS number_of_movies_per_year
FROM Movies
GROUP BY year
ORDER BY number_of_movies_per_year DESC
Limit 5;

--how many movies in each decade--
SELECT 
    year/10 * 10 + 1 as decade_start,
    year/10 * 10 + 10 as decade_end,
    COUNT(year) as number_of_movies
FROM  Movies
GROUP BY year/10 
ORDER BY decade_start;

--keeping decade in one column utilizing the concat function for later viz purposes-- 

SELECT
    decade_start || ' - ' || decade_end as decade,
    COUNT(year) as number_of_movies
FROM (
    SELECT 
        (year/10) * 10 + 1 as decade_start,
        (year/10) * 10 + 10 as decade_end,
        year
    FROM Movies
) AS subquery
GROUP BY decade_start
ORDER BY decade_start;

--most popular movie genre in each decade-- 
WITH genre_counts AS (
  SELECT genre, COUNT(*) AS genre_count, year
  FROM (
    SELECT TRIM(value) AS genre, year
    FROM Movies
    CROSS JOIN json_each('["' || REPLACE(genre, ',', '","') || '"]')
  )
  GROUP BY genre, year
), decade_max_genre AS (
  SELECT d.decade_start, d.decade_end, gc.genre,
         ROW_NUMBER() OVER (PARTITION BY d.decade_start ORDER BY gc.genre_count DESC) AS rn
  FROM (
    SELECT 
      year/10 * 10 + 1 AS decade_start,
      year/10 * 10 + 10 AS decade_end
    FROM Movies
    GROUP BY year/10
  ) d
  JOIN genre_counts gc ON gc.year >= d.decade_start AND gc.year <= d.decade_end
)
SELECT decade_start, decade_end, genre
FROM decade_max_genre
WHERE rn = 1
ORDER BY decade_start;

--combining  decade_start and decade_end into 1 column for viz purposes--

WITH genre_counts AS (
  SELECT genre, COUNT(*) AS genre_count, year
  FROM (
    SELECT TRIM(value) AS genre, year
    FROM Movies
    CROSS JOIN json_each('["' || REPLACE(genre, ',', '","') || '"]')
  )
  GROUP BY genre, year
), decade_max_genre AS (
  SELECT 
    d.decade_start || ' - ' || d.decade_end AS decade,
    gc.genre,
    ROW_NUMBER() OVER (PARTITION BY d.decade_start ORDER BY gc.genre_count DESC) AS rn
  FROM (
    SELECT 
      (year/10) * 10 + 1 AS decade_start,
      (year/10) * 10 + 10 AS decade_end
    FROM Movies
    GROUP BY year/10
  ) d
  JOIN genre_counts gc ON gc.year >= d.decade_start AND gc.year <= d.decade_end
)
SELECT decade, genre
FROM decade_max_genre
WHERE rn = 1
ORDER BY decade
